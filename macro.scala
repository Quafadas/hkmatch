import scala.quoted.*

transparent inline def overload1(dataType: TypeInferrer): Any =
  mac(HeaderOptions.AutoGenerated, dataType)

transparent inline def mac(
    inline hder: HeaderOptions,
    inline dataType: TypeInferrer
) = ${ mac_impl('hder, 'dataType) }

def mac_impl(hder: Expr[HeaderOptions], dataType: Expr[TypeInferrer])(using
    q: Quotes
): Expr[String] =
  val headers = Seq("header1", "header2", "header3")
  val headerTupleExpr = Expr.ofTupleFromSeq(headers.map(Expr(_)))

  headerTupleExpr match
    case '{ $tup: hdrs } =>
      dataType match {
        case '{ TypeInferrer.Auto } =>
          Expr("Auto")
        case '{ TypeInferrer.StringType } =>
          Expr("StringType")
        case '{ TypeInferrer.FromTuple[t]() } =>
          Expr(s"FromTuple[${summon[Type[t]]}]")
        case '{ TypeInferrer.FromTupled } =>
          Expr("FromTupled")
        // case _ =>
        //   Expr("Unknown type")
      }
